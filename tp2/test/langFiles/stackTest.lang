-- Arthur Negrao de Faria Martins da Costa (21.1.4001) e Igor Machado Cruz Guimaraes Oliveira (21.1.4012)

data Stack {
    body :: Int[];
    mSize :: Int;
    ind :: Int;
}

emptyStack(maxSize :: Int) : @Stack {
    s :: Stack;
    s.body = new Int [maxSize];
    s.mSize = maxSize;
    s.ind = 1;
    return s;
}

push(s :: @Stack, val :: Int) : @Stack {
    -- check if stack is full
    if (s.ind == s.mSize) then {skip;} else {
        s.body@[s.ind] = val;
        s.ind = s.ind + 1;
    }
    return s;
}

pop(s :: @Stack) : @Stack, Int {
    -- check if stack is empty
    val :: Int;
    if (s.ind == 1) then {skip;} else {
        val = s.body@[s.ind-1];
        s.ind = s.ind - 1;
        return s, val;
    }
}

numElems(s :: @Stack) : Int {
    return s.ind-1;
}

main() {
    s :: Stack; 
    s = emptyStack(5)[0];
    s = push(s, 1)[0];
    s = push(s, 2)[0];
    s = push(s, 3)[0];
    n1 = numElems(s)[0];
    s, poppedVal1 = pop(s)[0, 1];
    s, poppedVal2 = pop(s)[0, 1];
    s, poppedVal3 = pop(s)[0, 1];
    n2 = numElems(s)[0];

    return n1, n2, poppedVal1, poppedVal2, poppedVal3;
}